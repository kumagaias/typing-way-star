# タイピング＆語学学習ゲーム Typing Way Star 要件定義書

## 1. プロジェクト概要

### 1.1 目的
タイピングスキルと語学学習を同時に向上させるWebゲームの開発

### 1.2 対象ユーザー
- 日本語・英語学習者
- タイピング練習をしたいユーザー
- ゲーム感覚で語学を学びたいユーザー

## 2. 機能要件

### 2.1 ゲームコンセプト
**ドライブタイピングゲーム** - 車を運転しながら道中でタイピング問題に回答し、制限時間内にゴールを目指すゲーム

### 2.2 ゲームモード
- **単語コース**: 単語レベルでのタイピング練習
- **会話コース**: 文章レベルでのタイピング練習

### 2.3 言語設定
#### 2.3.1 出題・回答パターン
1. **同言語モード**
   - 日本語のお題 → 日本語で回答（ローマ字入力）
   - 英語のお題 → 英語で回答

2. **翻訳モード**
   - 日本語のお題 → 英語で回答
   - 英語のお題 → 日本語で回答（ローマ字入力）

#### 2.3.2 入力方式
- 日本語回答：ローマ字入力
- 英語回答：英字入力（スペース入力対応）

### 2.4 ゲームプレイ要素

#### 2.4.1 基本ゲームフロー
1. **コース選択**: 距離・難易度を選択
2. **車両選択**: 性能の異なる車両から選択
3. **ドライブ開始**: 自動で前進する車両
4. **タイピングチャレンジ**: 
   - 問題が画面上部に表示
   - 正解すると加速・スコア獲得
   - 間違いやタイムアウトで減速
5. **ゴール判定**: 制限時間内にゴール到達でクリア

#### 2.4.2 ゲーム要素詳細

**車両システム**
- **スピードタイプ**: 基本速度が速いが、ミス時の減速大
- **バランスタイプ**: 平均的な性能
- **スタミナタイプ**: 基本速度は遅いが、ミス時の減速小

**道路システム**
- 3Dパースペクティブビューの道路
- 背景スクロールでスピード感演出
- カーブやアップダウンで視覚的変化

**問題出現システム**
- 一定距離ごとに問題が出現
- 問題解決までの制限時間設定
- 連続正解でコンボボーナス

**障害物・ギミック**
- **対向車**: 避ける必要はないが視覚的な障害
- **工事区間**: 問題の制限時間が短縮
- **トンネル**: 暗くなり集中力が必要
- **加速ゾーン**: 正解時のスピードアップ効果増大

#### 2.4.3 ゲーム進行システム
- **距離表示**: 現在地点とゴールまでの距離
- **スピードメーター**: 現在の速度をリアルタイム表示
- **燃料ゲージ**: 時間制限を視覚化
- **コンボカウンター**: 連続正解数表示

### 2.5 ステージ構成

#### 2.5.1 全8ステージ制
プレイヤーは8つの異なるステージを順番にクリアしていく進行型ゲーム

**ステージ一覧**
1. **海岸コース**: 爽やかな海岸線を駆け抜ける
2. **砂漠コース**: 広大な砂漠の一本道
3. **山道コース**: カーブとトンネルの山間部
4. **市街地コース**: 建物と信号のある都市部
5. **海岸コース (夕方)**: 夕日が美しい海岸線
6. **砂漠コース (夕方)**: 夕焼けに染まる砂漠
7. **山道コース (夜)**: ヘッドライトが頼りの山道
8. **市街地コース (夜)**: ネオンが光る夜の街

#### 2.5.2 ルートマップシステム
**全体マップ表示**
- ゲーム開始時にルートマップを表示
- 全8ステージが道路で繋がった一本道として表現
- プレイヤーの現在位置をアイコンで表示
- 各ステージをクリアするごとにマップ上を進行

**マップ上でのステージ表現**
- **解放済みステージ**: 明るく表示、選択可能
- **現在ステージ**: プレイヤーアイコンで位置を表示
- **未解放ステージ**: 暗く表示またはロックアイコン
- **クリア済みステージ**: チェックマークやトロフィーアイコン

**進行演出**
- ステージクリア時にルートマップに戻る
- プレイヤーアイコンが次のステージまで移動するアニメーション
- 新しいステージが解放される演出（光るエフェクトなど）
- 全8ステージクリア時の特別な完走演出

#### 2.5.3 ステージ特性
**昼ステージ（1-4）**
- 明るく見やすい環境
- 基本的なゲームメカニクス
- 初心者向けの問題バランス

**夕方ステージ（5-6）**
- 美しい夕焼けの風景
- 中級者向けの問題難易度
- オレンジ色の温かい光による幻想的な雰囲気

**夜ステージ（7-8）**
- 視認性が下がり集中力が必要
- より高難度の問題
- ヘッドライト・街灯による限定的な照明

#### 2.5.4 ステージ進行システム
- **順次解放**: 前のステージをクリアすると次が開放
- **ステージクリア条件**: 制限時間内にゴール到達
- **ステージ失敗時の処理**:
  - 失敗したステージから再挑戦可能
  - スコアはステージ挑戦前の状態に戻る
  - 進捗状況は変更なし（解放済みステージは維持）
- **全ステージクリア**: 8ステージ全てをクリアでゲーム完了
- **リプレイ可能**: クリア済みステージは何度でも挑戦可能

### 2.6 難易度設定
- **Easy**: 短い・簡単な単語/文章
- **Medium**: 中程度の長さ・難易度
- **Hard**: 長い・難しい単語/文章

### 2.7 スコアシステム

#### 2.7.1 基本スコア計算
- **基本ポイント**: 問題の難易度 × 正解時の速度
- **コンボボーナス**: 連続正解数に応じた倍率
- **完走ボーナス**: 制限時間内ゴールで大幅加点
- **タイムボーナス**: 残り時間に応じた追加ポイント

#### 2.7.2 評価指標
- **総合スコア**: 上記要素の合計
- **平均WPM**: Words Per Minute
- **正答率**: 全問題に対する正解率
- **完走タイム**: スタートからゴールまでの時間
- **最高コンボ**: 連続正解の最高記録

#### 2.7.3 区間記録システム
- **ステージ別記録**: 各ステージ（1-8）の個別スコア記録
- **モード別記録**: 単語モード・会話モード別の記録
- **難易度別記録**: Easy・Medium・Hard別の記録
- **翻訳方向別記録**: 日→英・英→日別の記録
- **ベストタイム記録**: 各区間での最短完走時間
- **ハイスコア記録**: 各区間での最高スコア

#### 2.7.4 ランキングシステム
- **総合ランキング**: 全コース・全難易度の総合スコア
- **ステージ別ランキング**: 各ステージ（1-8）別のランキング
- **モード×難易度別ランキング**: 以下の組み合わせでそれぞれ表示
  - 単語モード × Easy / Medium / Hard
  - 会話モード × Easy / Medium / Hard
- **翻訳方向別ランキング**: 日→英・英→日別
- **月間ランキング**: 月単位でのランキングリセット
- **TOP50表示**: 上位50名まで表示

#### 2.7.5 スコア管理
- **挑戦前バックアップ**: ステージ挑戦前のスコア状態を保存
- **失敗時ロールバック**: ステージ失敗時は挑戦前の状態に復元
- **リトライ回数管理**: ステージごとのリトライ回数を0から記録
- **成功時更新**: ステージクリア時のみスコア更新・記録

### 2.8 将来拡張
- 他言語対応（中国語、韓国語等）
- マルチプレイ機能
- カスタムコース作成機能
- 車両カスタマイズシステム

## 3. 技術要件

### 3.0 コスト最適化方針

#### 3.0.1 基本方針
- **AWSコストを極力抑制**：0円運用を目標とする
- **無料枠最大活用**：AWS Free Tierの範囲内での運用を前提
- **コスト発生時の事前確認**：費用が発生する可能性がある場合は実装前に確認・承認を得る

#### 3.0.2 コスト最適化アーキテクチャ
**フロントエンド**
- **CloudFront Free Tier**: 1TB/月の無料データ転送
- **S3 Free Tier**: 5GB無料ストレージ + 20,000 GET/2,000 PUT リクエスト

**バックエンド**
- **Lambda Free Tier**: 100万リクエスト/月 + 400,000 GB-秒/月
- **API Gateway Free Tier**: 100万APIコール/月（12ヶ月間）

**データベース**
- **DynamoDB Free Tier**: 25GB無料ストレージ + 25 RCU/WCU（恒久無料）

**その他**
- **CloudWatch Free Tier**: 基本メトリクス（5分間隔）
- **Route 53**: 必要に応じてサブドメイン使用（$0.50/月/ホストゾーン）
- **AWS WAF Free Tier**: 100万ウェブリクエスト/月、基本ルール無料

#### 3.0.3 コスト監視・アラート
- **AWS Budgets**: $0予算設定 + コストアラート
- **Cost Explorer**: 月次コスト分析
- **CloudWatch Billing Alarms**: $5超過時のアラート設定

#### 3.0.4 コスト発生要注意項目
以下の項目は費用が発生する可能性があるため、実装前に要確認：
- **Route 53 ホストゾーン**: $0.50/月/ホストゾーン（サブドメイン用）
- **NAT Gateway**: VPC使用時（$0.045/時間）
- **Application Load Balancer**: 必要時（$0.0225/時間）
- **CloudWatch Logs**: ログ保存容量超過時
- **Data Transfer**: リージョン間・インターネット向け転送
- **Lambda実行時間**: 無料枠超過時
- **DynamoDB**: スループット・ストレージ超過時

#### 3.0.5 ドメイン設定
**既存ドメイン活用**
- **メインドメイン**: kumarabo.com（既存所有）
- **本番環境**: typing-way-star.kumarabo.com
- **開発環境**: typing-way-star.develop.kumarabo.com

**Route 53 設定**
- **サブドメイン用ホストゾーン作成**: typing-way-star.kumarabo.com ($0.50/月)
- **SSL証明書**: AWS Certificate Manager（無料）
- **DNS設定**: A/CNAMEレコードでCloudFront配信設定

#### 3.0.6 マルチアカウント戦略
**プロダクト × 環境 × AWSアカウント構成**
- **本番用AWSアカウント**: typing-way-star-production
- **開発用AWSアカウント**: typing-way-star-develop

**アカウント分離による利点**
- **環境完全分離**: 本番への意図しない影響を防止
- **コスト管理**: 環境別コスト明確化
- **セキュリティ向上**: アカウントレベルでの権限分離
- **リソース管理**: 環境別リソース管理の簡素化

**アカウント間連携**
- **Cross-Account IAM Role**: デプロイ用権限管理
- **OIDC設定**: GitHub Actions から各アカウントへのデプロイ
- **共通設定**: Terraform backend設定（アカウント別）

### 3.1 プロジェクト構成

#### 3.1.1 ディレクトリ構成
```
typing-way-star/
├── back/                    # バックエンド
│   ├── cmd/
│   ├── internal/
│   ├── pkg/
│   ├── docs/               # OpenAPI仕様書
│   ├── Dockerfile
│   └── go.mod
├── front/                   # フロントエンド
│   ├── src/
│   ├── public/
│   ├── tests/
│   ├── package.json
│   └── next.config.js
├── infra/                   # インフラストラクチャ
│   ├── terraform/
│   ├── modules/
│   └── environments/
├── scripts/                 # 初期構築・メンテナンススクリプト
│   ├── setup.sh
│   ├── deploy.sh
│   ├── data/               # 初期データ作成スクリプト
│   │   ├── generate_words.py
│   │   ├── translate_words.py
│   │   └── import_to_db.py
│   └── maintenance/
├── .devcontainer/          # Dev Containers設定
├── .github/workflows/      # GitHub Actions
└── README.md
```

### 3.2 フロントエンド

#### 3.2.1 技術スタック
- **Node.js**: LTS最新版
- **フレームワーク**: Next.js LTS最新版
- **スタイリング**: Tailwind CSS LTS最新版
- **テスト**: Playwright
- **プラットフォーム**: Webブラウザのみ対応
- **ゲームエンジン**: Canvas API / WebGL (Three.js)

#### 3.2.2 主要機能
- 3Dドライブゲーム画面
- タイピングインターフェース
- リアルタイムスコア表示
- ランキング表示
- 設定画面

#### 3.2.3 デプロイメント
- **S3 + CloudFront**: 静的サイトホスティング（Free Tier活用）
- **ドメイン設定**:
  - 本番: typing-way-star.kumarabo.com
  - 開発: typing-way-star.develop.kumarabo.com
- **SSL/TLS**: AWS Certificate Manager（無料証明書）

#### 3.2.4 セキュリティ対策
- **XSS対策**: Content Security Policy、入力値サニタイズ
- **CSRF対策**: SameSiteクッキー、CSRFトークン
- **クリックジャッキング対策**: X-Frame-Options
- **WAF保護**: AWS WAF Free Tier（100万リクエスト/月、基本ルール）
- **機密情報漏洩対策**:
  - console.log削除（本番ビルド時）
  - ソースコード難読化

### 3.3 バックエンド

#### 3.3.1 技術スタック
- **言語**: Go LTS最新版
- **フレームワーク**: Gin LTS最新版
- **実行環境**: AWS Lambda（無料枠：100万リクエスト/月）
- **API Gateway**: AWS API Gateway（無料枠：100万APIコール/月）
- **仕様書**: OpenAPI

#### 3.3.2 主要API
- 問題取得API
- スコア登録API
- ランキング取得API
- ゲームセッション管理API

#### 3.3.3 セキュリティ対策
- **入力検証**:
  - **構造体バリデーション**: Go validator使用
  - **型安全性**: 厳密な型チェック
  - **文字列長制限**: 異常な長さの入力拒否
  - **特殊文字エスケープ**: HTMLエンティティ化
- **プロダクト固有セキュリティ**:
  - スコア改ざん防止
  - ゲームセッションの整合性チェック

### 3.4 データベース

#### 3.4.1 技術スタック
- **DB**: Amazon DynamoDB（無料枠：25GB + 25 RCU/WCU恒久無料）
- **セキュリティ対策**:
  - 個人情報最小化
  - データ暗号化（保存時・転送時）
  - IAM認証（AWSアクセスキー不使用）

### 3.5 インフラストラクチャ

#### 3.5.1 技術スタック
- **IaC**: Terraform LTS最新版
- **ロック機構**: S3（DynamoDBではなく）
- **クラウド**: AWS（マルチアカウント構成）
- **デプロイ**: ローカルからterraform plan & apply

#### 3.5.2 マルチアカウント構成
- **本番アカウント**: typing-way-star-production
- **開発アカウント**: typing-way-star-develop
- **Terraform Backend**: アカウント別S3バケット
- **状態管理**: 環境別tfstateファイル分離

#### 3.5.3 OIDC連携
- GitHub ActionsとAWSのOIDC連携（各アカウント別）
- アクセストークン不使用
- infraにOIDC用ロール設定（マルチアカウント対応）

### 3.6 CI/CD

#### 3.6.1 GitHub Actions パイプライン
**3つのパイプラインを作成**:

1. **back-deploy**: バックエンドデプロイ用
2. **front-deploy**: フロントエンドデプロイ用
3. **security**: セキュリティチェック

#### 3.6.2 環境構成
- **main ブランチ**: 本番環境（typing-way-star-production アカウント）
- **develop ブランチ**: ステージング環境（typing-way-star-develop アカウント）

#### 3.6.3 指針
- 環境情報・秘密情報はGitHub secrets/environments使用
- ハードコード禁止

### 3.7 対応ブラウザ
- Chrome 最新版
- Firefox 最新版  
- Safari 最新版
- Edge 最新版

### 3.8 開発環境

#### 3.8.1 開発手法
- **t_wada流 TDD**の適用
- 各タスクごとに手動確認方法を含める
- 優先度分類: **high** (MVP) / **medium** / **low**

#### 3.8.2 環境構築
- **Dev Containers**使用
- ローカル環境でDB含めて構築
- 環境構築・スクリプト更新時は**README.md必須更新**

#### 3.8.3 セキュリティ方針
- **ログ**: 機密情報をログに残さない
- **認証**: IAM認証中心
- **暗号化**: 転送時・保存時の両方で実装

## 4. データベース設計

### 4.1 wordsテーブル
| カラム名 | データ型 | 説明 |
|----------|----------|------|
| id | String (PK) | 問題ID |
| mode | Number | モード（0: 単語, 1: 会話） |
| difficulty | Number | 難易度（0: easy, 1: medium, 2: hard） |
| created_at | String | 作成日時（ISO 8601） |
| updated_at | String | 更新日時（ISO 8601） |

### 4.2 translationsテーブル
| カラム名 | データ型 | 説明 |
|----------|----------|------|
| word_id | String (PK) | 問題ID（wordsテーブルのid） |
| lang | String (SK) | 言語コード（ja, en） |
| text | String | テキスト内容 |
| alternatives | List<String> | 代替表現・類義語リスト（ヒント機能用） |

### 4.3 stagesテーブル（ステージ情報）
| カラム名 | データ型 | 説明 |
|----------|----------|------|
| id | String (PK) | ステージID |
| stage_number | Number | ステージ番号（1-8） |
| name | String | ステージ名 |
| environment | String | 環境（coast, desert, mountain, city） |
| time_of_day | String | 時間帯（day, evening, night） |
| time_limit | Number | 制限時間（秒） |
| unlock_condition | String | 解放条件 |
| created_at | String | 作成日時 |

### 4.4 user_progressテーブル（ユーザー進捗管理）
| カラム名 | データ型 | 説明 |
|----------|----------|------|
| user_id | String (PK) | ユーザーID |
| difficulty | Number (SK) | 難易度（0: easy, 1: medium, 2: hard） |
| translation_direction | String (SK) | 翻訳方向（ja_to_en, en_to_ja） |
| unlocked_stages | List<Number> | 解放済みステージ番号リスト |
| completed_stages | List<Number> | クリア済みステージ番号リスト |
| current_stage | Number | 現在挑戦中のステージ |
| current_stage_retry_count | Number | 現在ステージのリトライ回数（0から開始） |
| total_score | Number | 累計スコア |
| pre_challenge_score | Number | ステージ挑戦前スコア（失敗時ロールバック用） |
| best_scores | Map<String, Number> | ステージ別ベストスコア |
| best_times | Map<String, Number> | ステージ別ベストタイム |
| created_at | String | 作成日時 |
| updated_at | String | 更新日時 |

### 4.5 scoresテーブル（ランキング用）
| カラム名 | データ型 | 説明 |
|----------|----------|------|
| id | String (PK) | スコアID |
| user_name | String | ユーザー名 |
| user_id | String | ユーザーID |
| stage_id | String | ステージID |
| stage_number | Number | ステージ番号 |
| car_type | Number | 車両タイプ（0: speed, 1: balance, 2: stamina） |
| score | Number | 総合スコア |
| wpm | Number | Words Per Minute |
| accuracy | Number | 翻訳精度（%） |
| completion_time | Number | 完走時間（秒） |
| max_combo | Number | 最高コンボ数 |
| retry_count | Number | リトライ回数（0から開始） |
| is_completed | Boolean | 完走フラグ |
| mode | Number | モード（0: 単語, 1: 会話） |
| difficulty | Number | 難易度 |
| translation_direction | String | 翻訳方向 |
| created_at | String | 記録日時 |

## 5. ゲーム画面設計

### 5.1 言語・難易度選択画面
- **翻訳方向選択**: 日本語→英語 / 英語→日本語
- **難易度選択**: Easy / Medium / Hard
- **モード選択**: 単語モード / 会話モード
- 進行状況表示（全8ステージ中の現在位置）

### 5.2 ルートマップ画面
- **全体ルートマップ表示**: 8ステージが道路で繋がった一本道
- **プレイヤー位置表示**: 現在のステージ位置をアイコンで表示
- **ステージ状態表示**:
  - 解放済み: 明るく表示、選択可能
  - 現在位置: プレイヤーアイコンで表示
  - 未解放: 暗く表示またはロックアイコン
  - クリア済み: チェックマークやトロフィーアイコン
- **進行アニメーション**: ステージクリア時の移動演出
- **ステージ選択**: 解放済みステージへの直接移動機能
- **進捗表示**: 全8ステージ中の現在位置（x/8）

### 5.3 車両選択画面
- 3車種の性能比較表
- 3Dモデルのプレビュー
- 各車両の特徴説明
- ステージプレビュー画面

### 5.4 ステージ選択画面（ルートマップから派生）
- **8ステージ一覧表示**
  - 昼4ステージ（1-4）
  - 夕方2ステージ（5-6） 
  - 夜2ステージ（7-8）
- 解放状況の視覚化（ロック/アンロック/クリア済み）
- 各ステージのベストスコア表示
- ステージ別統計（クリア率、平均スコア）
- 全ステージクリア進捗バー
- **時間帯プレビュー**: 各ステージの雰囲気を表現

### 5.5 メインゲーム画面
**上部エリア**
- **翻訳問題表示**: 原文（日本語 or 英語）
- **タイピング入力フィールド**: 翻訳先言語で入力
- **翻訳精度表示**: リアルタイム採点（0-100%）
- 制限時間バー
- **ステージ進捗**: 現在のステージ番号（x/8）

**中央エリア**
- **環境別3D道路ビュー**
  - 海岸：波音と潮風エフェクト
  - 砂漠：砂塵と蜃気楼エフェクト
  - 山道：霧とトンネルエフェクト
  - 市街地：建物と交通エフェクト
- **時間帯別照明システム**
  - 昼：明るく鮮明な描画、自然光
  - 夕方：温かいオレンジ色の光、美しい夕焼け空
  - 夜：ヘッドライト照明、街灯、星空
- 車両モデル
- 背景スクロール

**下部エリア**
- スピードメーター
- 現在地/ゴール距離
- 燃料ゲージ（残り時間）
- スコア・コンボ表示

**右側UI**
- ミニマップ
- 統計情報（翻訳精度, WPM）
- **ヒント表示**: 難しい問題でのヒント機能（代替表現・類義語表示）

### 5.6 ステージクリア画面
- **ステージクリア演出**: 花火やエフェクト
- **次ステージ解放通知**: 新しいステージが開放された場合
- 詳細統計
  - ステージスコア
  - 完走時間
  - 平均WPM
  - **翻訳精度**: 平均翻訳スコア
  - 最高コンボ
- **学習ポイント**: 間違えた問題の正解例表示
- **進行選択**
  - 次のステージへ
  - ステージ選択に戻る
  - 同じステージをリプレイ

### 5.7 全ステージクリア画面
- **ゲームクリア演出**: 特別なエンディング映像
- **ルートマップ完走演出**: 全ステージを制覇した道のりを表示
- **総合成績表示**
  - 全ステージ合計スコア
  - 総プレイ時間
  - 全体翻訳精度
  - 総合ランキング
- **実績・称号表示**: ゲームクリア記念
- **リプレイオプション**: ルートマップから好きなステージを再挑戦

### 5.8 ランキング画面
- **フィルター機能**
  - **ステージ別**（1-8）: 各ステージの区間記録
  - **モード×難易度別**: 以下の6つの組み合わせ
    - 単語モード × Easy / Medium / Hard
    - 会話モード × Easy / Medium / Hard  
  - **翻訳方向別**（日→英 / 英→日）
  - **期間別**: 月間・全期間
  - **全ステージクリア記録**: 8ステージ全クリア者のランキング
- **ランキング表示**
  - 総合ランキングテーブル
  - ステージ別区間記録ランキング
  - モード×難易度組み合わせ別ランキング
  - **リトライ回数表示**: 各記録のリトライ回数を併記
- **自己記録表示**
  - 自己記録ハイライト
  - **ステージ別ベスト**: 各ステージでの自己ベストスコア・タイム
  - **カテゴリ別自己記録**: モード×難易度別の自己ベスト
  - **リトライ統計**: 各ステージでの自己リトライ回数表示

## 6. 開発フェーズ

### Phase 1: 基盤構築（4週間）- **HIGH**
- インフラ構築（Terraform）
- 基本API開発
- データベース設計・構築
- **初期データ作成スクリプト実行**
  - 日本語問題生成（単語/会話 × Easy/Medium/Hard × 100個）
  - AWS Translate使用による英語翻訳
  - DynamoDBへの一括インポート
- 基本UI画面（コース選択、設定画面）
- Dev Containers環境構築
- GitHub Actions CI/CD設定

### Phase 2: ゲームコア機能（6週間）- **HIGH**
- 3Dドライブ画面実装
- タイピングシステム統合
- 問題出現・回答システム
- スコア計算・保存機能
- セキュリティ対策実装

### Phase 3: ゲーム要素強化（4週間）- **MEDIUM**
- 車両システム実装
- コース環境バリエーション
- 視覚エフェクト・サウンド
- コンボ・ボーナスシステム

### Phase 4: 完成・最適化（3週間）- **MEDIUM**
- ランキングシステム完成
- パフォーマンス最適化
- バグ修正・バランス調整
- デプロイ・リリース準備

## 7. 非機能要件

### 7.1 パフォーマンス
- API応答時間: 200ms以下
- ゲーム画面フレームレート: 60FPS維持
- 3D描画最適化: ローポリゴンモデル使用
- 初回ロード時間: 5秒以下

### 7.2 可用性
- アップタイム: 99.9%以上

### 7.3 セキュリティ
- HTTPS通信
- CORS設定
- 入力値検証

### 7.4 スケーラビリティ
- 同時接続ユーザー: 1000人以上対応

### 7.5 ブラウザ対応
- **推奨ブラウザ**: Chrome 90+, Firefox 88+, Safari 14+, Edge 90+
- **WebGL対応**: 3D描画のためWebGL 2.0必須
- **レスポンシブ対応**: デスクトップ・タブレット対応（スマートフォンは対象外）

## 8. テスト駆動開発戦略

### 8.1 TDD基本方針
**Red → Green → Refactor** のサイクルを厳密に守り、テストファーストで開発を進める

#### 8.1.1 t_wada流TDDの適用
- **まずテストを書く**: 機能実装前に必ずテストを書く
- **小さなステップ**: 一度に実装する機能は最小単位に分割
- **リファクタリング**: グリーンになったら必ずコードの品質向上
- **テスト可能な設計**: DIやモック可能な設計を心がける

### 8.2 テスト戦略

#### 8.2.1 フロントエンド（Next.js）
**統合テスト (Playwright)**
```javascript
// 例：翻訳ゲーム全体フローのテスト
describe('翻訳ドライブタイピングゲーム', () => {
  test('日→英翻訳でゲーム完了まで', () => {
    // Given: トップページにアクセス
    // When: 日→英コース選択、車両選択、ゲーム開始
    // Then: 翻訳問題が表示され、英語で回答できる
    // And: 翻訳精度に応じてスピードが変化する
  });
});
```

#### 8.2.2 バックエンド（Go）
**単体テスト (標準testing package + testify)**
```go
// 例：翻訳精度評価ロジックのテスト
func TestTranslationScoring(t *testing.T) {
    // Given: 正解「Hello」、ユーザー回答「Hi」
    correctAnswers := []string{"Hello", "Hi there"}
    userAnswer := "Hi"
    
    // When: 翻訳精度評価を実行
    score := EvaluateTranslation(correctAnswers, userAnswer)
    
    // Then: 類義語として80%のスコアが返される
    assert.Equal(t, 80, score)
}
```

### 8.3 テスト環境構成

#### 8.3.1 フロントエンド
- **Playwright**: E2Eテスト
- **MSW (Mock Service Worker)**: APIモック

#### 8.3.2 バックエンド
- **Go標準testing**: 基本テストフレームワーク
- **testify/assert**: アサーションライブラリ
- **testify/mock**: モックオブジェクト
- **DynamoDB Local**: ローカルDB環境

### 8.4 手動確認方法
各機能開発完了時には以下の手動確認を実施:
- **機能確認**: 正常系・異常系の動作確認
- **パフォーマンス確認**: レスポンス時間・メモリ使用量
- **セキュリティ確認**: 入力値検証・認証動作
- **ユーザビリティ確認**: 操作性・表示確認

## 9. 初期データ作成戦略

### 9.1 データ作成方針
**段階的データ生成アプローチ**
1. **日本語問題作成**: 各カテゴリ100個ずつ手動/半自動生成
2. **自動翻訳**: AWS Translate使用による英語翻訳
3. **品質確認**: 翻訳結果の妥当性チェック
4. **代替表現追加**: 類義語・代替表現の手動追加
5. **DB一括投入**: DynamoDB一括インポート

### 9.2 データ構成
**作成対象データ**
- **単語モード**: 
  - Easy: 100個（基本単語・短いフレーズ）
  - Medium: 100個（中級単語・複合語）
  - Hard: 100個（上級単語・専門用語）
- **会話モード**:
  - Easy: 100個（短文・日常会話）
  - Medium: 100個（複文・ビジネス会話）
  - Hard: 100個（長文・専門的会話）

**合計: 600問（日本語→英語翻訳で1200エントリ）**

### 9.3 初期データ作成スクリプト

#### 9.3.1 スクリプト構成
```
scripts/data/
├── generate_words.py       # 日本語問題生成
├── translate_words.py      # AWS Translate使用翻訳
├── import_to_db.py        # DynamoDB一括インポート
├── validate_data.py       # データ品質チェック
├── data/
│   ├── words_ja.json      # 生成した日本語問題
│   ├── words_en.json      # 翻訳後英語問題
│   └── final_dataset.json # 最終統合データ
└── requirements.txt       # Python依存関係
```

#### 9.3.2 生成プロセス
1. **日本語問題生成** (`generate_words.py`)
   - カテゴリ別・難易度別の問題生成
   - JSON形式での出力
   - 代替表現の初期設定

2. **AWS Translate翻訳** (`translate_words.py`)
   - AWS Translate API使用
   - バッチ翻訳処理
   - 翻訳品質スコア記録

3. **データ統合・検証** (`validate_data.py`)
   - 翻訳結果の妥当性チェック
   - 代替表現の追加・修正
   - フォーマット統一

4. **DB投入** (`import_to_db.py`)
   - DynamoDB一括インポート
   - エラーハンドリング
   - 投入結果レポート

### 9.4 翻訳品質管理
**AWS Translate活用**
- **翻訳精度**: リアルタイム品質スコア取得
- **コスト管理**: Free Tier内での翻訳量管理（200万文字/月）
- **品質チェック**: 自動翻訳結果の人的レビュー

**代替表現生成**
- 翻訳結果に対する類義語・代替表現の手動追加
- 文脈に応じた適切な表現の選定
- ゲーム内ヒント機能への活用

### 9.5 実行手順
```bash
# 1. 環境準備
cd scripts/data
pip install -r requirements.txt

# 2. 日本語問題生成
python generate_words.py

# 3. 英語翻訳
python translate_words.py

# 4. データ検証
python validate_data.py

# 5. DB投入
python import_to_db.py
```

### 9.6 データメンテナンス
- **定期的な問題追加**: 月次での新問題追加
- **翻訳品質改善**: ユーザーフィードバックに基づく修正
- **代替表現拡充**: 学習効果向上のための表現追加